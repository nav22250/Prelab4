
laboratorio41.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000024f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ab  00000000  00000000  0000027f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c4  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setup   00000024  00000112  00000112  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_4 00000050  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000024  00000136  00000136  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.contador 00000001  00800100  00800100  00000212  2**0
                  ALLOC
 18 .text.__dummy_fini 00000002  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000017c  0000017c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000015a  0000015a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000174  00000174  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  ba:	0c 94 ad 00 	jmp	0x15a	; 0x15a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000170 <__bad_interrupt>:
 170:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

00000112 <setup>:



void setup() {
	
	DDRC &= ~((1 << PC4) | (1 << PC5)); // Configurar PC4 y PC5 como entradas
 112:	87 b1       	in	r24, 0x07	; 7
 114:	8f 7c       	andi	r24, 0xCF	; 207
 116:	87 b9       	out	0x07, r24	; 7

	PORTC |= (1 << PC4) | (1 << PC5); // Habilitar resistencias pull-up en PC4 y PC5
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	80 63       	ori	r24, 0x30	; 48
 11c:	88 b9       	out	0x08, r24	; 8

	PCICR |= (1 << PCIE1); // Habilitar interrupciones por cambio de estado en PC4 y PC5
 11e:	e8 e6       	ldi	r30, 0x68	; 104
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
 128:	ec e6       	ldi	r30, 0x6C	; 108
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 63       	ori	r24, 0x30	; 48
 130:	80 83       	st	Z, r24

	sei(); // Habilitar interrupciones globales
 132:	78 94       	sei
 134:	08 95       	ret

Disassembly of section .text.__vector_4:

000000c2 <__vector_4>:
}


ISR(PCINT1_vect) { //Interrupcion de botones
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	87 e8       	ldi	r24, 0x87	; 135
  d2:	93 e1       	ldi	r25, 0x13	; 19
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <__vector_4+0x12>
  d8:	00 c0       	rjmp	.+0      	; 0xda <__vector_4+0x18>
  da:	00 00       	nop
	
	_delay_ms(20);
	
	if (!(PINC & (1 << PC4))) { // comprobar si boton de incremento esta presionado
  dc:	34 99       	sbic	0x06, 4	; 6
  de:	05 c0       	rjmp	.+10     	; 0xea <__vector_4+0x28>
		contador++;
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	93 e1       	ldi	r25, 0x13	; 19
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__vector_4+0x2c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_4+0x32>
  f4:	00 00       	nop
	}
	
	_delay_ms(20);
	
	if (!(PINC & (1 << PC5))) { // comprobar si boton de decremento esta presionado
  f6:	35 99       	sbic	0x06, 5	; 6
  f8:	05 c0       	rjmp	.+10     	; 0x104 <__vector_4+0x42>
		contador--;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

Disassembly of section .text.main:

00000136 <main>:

int main() {
	setup();
 136:	0e 94 89 00 	call	0x112	; 0x112 <setup>

	while (1) {
		
		//actualizacion de LEDS
		PORTC = (PORTC & 0xF0) | (contador & 0x0F); // poner los primeros 4 bits en el PORTC
 13a:	98 b1       	in	r25, 0x08	; 8
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	88 b9       	out	0x08, r24	; 8
		PORTB = (PORTB & 0xF0) | ((contador & 0xF0) >> 4); // poner los ultimos leds en el PORTB
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	92 95       	swap	r25
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	89 2b       	or	r24, r25
 156:	85 b9       	out	0x05, r24	; 5
 158:	f0 cf       	rjmp	.-32     	; 0x13a <main+0x4>

Disassembly of section .text.__dummy_fini:

00000178 <_fini>:
 178:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000017a <__funcs_on_exit>:
 17a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017c <__simulator_exit>:
 17c:	08 95       	ret

Disassembly of section .text.exit:

0000015a <exit>:
 15a:	ec 01       	movw	r28, r24
 15c:	0e 94 bd 00 	call	0x17a	; 0x17a <__funcs_on_exit>
 160:	0e 94 bc 00 	call	0x178	; 0x178 <_fini>
 164:	ce 01       	movw	r24, r28
 166:	0e 94 be 00 	call	0x17c	; 0x17c <__simulator_exit>
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 ba 00 	call	0x174	; 0x174 <_Exit>

Disassembly of section .text._Exit:

00000174 <_Exit>:
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
